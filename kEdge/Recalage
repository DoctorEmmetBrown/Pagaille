##############################################################################
# Flood as mask
# -------------
#
# A sister function, `flood`, is available which returns a mask identifying
# the flood rather than modifying the image itself.  This is useful for
# segmentation purposes and more advanced analysis pipelines.
#
# Here we segment the nose of a cat.  However, multi-channel images are not
# supported by flood[_fill].  Instead we Sobel filter the red channel to
# enhance edges, then flood the nose with a tolerance.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from PIL import Image
from skimage import data, filters
from skimage.segmentation import flood, flood_fill
from InputOutput.pagailleIO import saveEdf,openImage,openSeq



#                  I-    I+     Ba-   Ba+   Gd-   Gd+  Au-   Au+
mu_water=       [0.341, 0.316,0.294,0.279,0.229,0.224,0.184,0.182]


def seuil(self, thresh):
    self.data[self.data<thresh] = 0
    self.data[self.data>=thresh] = 1
    self.data = np.asarray(self.data, np.bool)


def filtreParTaille(self, tailleMini):
    label_image = label(self.data)

    for region in regionprops(label_image):
        if region.area < tailleMini:
            self.data[label_image == region.label] = False


imgF = '/Volumes/ID17/rsrm/md1011/voltif/Ex_vivo_R0842_16_AuC_PM__AboveAu__00_pag-0.16_0.68_/Ex_vivo_R0842_16_AuC_PM__AboveAu__003_pag_0200.tif'
img = mpimg.imread(imgF)
imgF2 = '/Volumes/ID17/rsrm/md1011/volfloat/Ex_vivo_R0842_16_AuC_PM__AboveAu__001_pag/Ex_vivo_R0842_16_AuC_PM__AboveAu__001_pag_0260.edf'
img2 = openImage(imgF2)
#plt.imshow(img)
img2 = np.array(imgF2)
print(img)
#print(img)
cameraman = data.camera()

fig, ax = plt.subplots(nrows=2, figsize=(120, 20))

ax[0].imshow(img, cmap='gray')
ax[0].set_title('Original')
ax[0].axis('off')

ax[1].imshow(img)
img[img<46500]=0
img[img>=46500]=1
#img_seuil = filtreParTaille(img_seuil, 100)
ax[1].imshow(img, cmap='gray')
ax[1].set_title('Seuil')
ax[1].axis('off')

#fig.tight_layout()
plt.show()

